using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using RepairTool.Core;

namespace RepairTool.Repairs.Activities.Malware
{
    public class MalwareBytes
    {
        public static void Install()
        {
            var runFile = EnvironmentVars.WINMAL + "mbam\\mb3-setup-54035.54035-3.6.1.2711-1.0.482-1.0.7469.exe";
            using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
            {
                Logger.LogInfo("Installing MBAM...", w);
            }
            // Prepare the process to run
            ProcessStartInfo start = new ProcessStartInfo();
            start.UseShellExecute = false;
            start.RedirectStandardOutput = true;
            start.RedirectStandardError = true;
            
            // Enter in the command line arguments, everything you would enter after the executable name itself
            start.Arguments = "/SP- /VERYSILENT /NORESTART /SUPPRESSMSGBOXES /NOCANCEL";

            // Enter the executable to run, including the complete path
            start.FileName = runFile;
            // Do you want to show a console window?
            start.WindowStyle = ProcessWindowStyle.Hidden;
            start.CreateNoWindow = true;
            int exitCode;


            // Run the external process & wait for it to finish
            using (Process proc = Process.Start(start))
            {
                proc.WaitForExit();
                System.Threading.Thread.Sleep(30000);
                var output = proc.StandardOutput.ReadToEnd();
                using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
                {
                    Logger.LogInfo(output, w);
                }
                // Retrieve the app's exit code
                exitCode = proc.ExitCode;
            }
        }

        public static void Close()
        {
            var runFile = EnvironmentVars.WINDIR + "system32\\cmd.exe";
            // Prepare the process to run
            ProcessStartInfo start = new ProcessStartInfo();
            start.UseShellExecute = false;
            start.RedirectStandardOutput = true;
            start.RedirectStandardError = true;
            
            // Enter in the command line arguments, everything you would enter after the executable name itself
            start.Arguments = "net stop mbamservice";

            // Enter the executable to run, including the complete path
            start.FileName = runFile;
            // Do you want to show a console window?
            start.WindowStyle = ProcessWindowStyle.Hidden;
            start.CreateNoWindow = true;
            
            // Run the external process & wait for it to finish
            using (Process proc = Process.Start(start))
            {
                proc.WaitForExit();
                System.Threading.Thread.Sleep(30000);
                var output = proc.StandardOutput.ReadToEnd();
                using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
                {
                    Logger.LogInfo(output, w);
                }
            }

            ProcessStartInfo taskkill = new ProcessStartInfo();
            taskkill.UseShellExecute = false;
            taskkill.RedirectStandardError = true;
            taskkill.RedirectStandardOutput = true;
            taskkill.Arguments = "taskkill /f /im mbamtray.exe";
            taskkill.FileName = runFile;
            taskkill.WindowStyle = ProcessWindowStyle.Hidden;
            taskkill.CreateNoWindow = true;
            
            using (Process proc = Process.Start(taskkill))
            {
                proc.WaitForExit();
                System.Threading.Thread.Sleep(30000);
                var output = proc.StandardOutput.ReadToEnd();
                using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
                {
                    Logger.LogInfo(output, w);
                }
            }
        }

        public static void InstallConfig()
        {
            DirectoryInfo dirInfo = new DirectoryInfo(EnvironmentVars.WINMAL + "mbam\\");
            List<FileInfo> fileInfo = dirInfo.GetFiles("*.json").ToList();
            string destDir = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) +
                             "\\Malwarebytes\\MBAMService\\config\\";

            foreach (FileInfo foundFile in fileInfo)
            {
                var path = foundFile.FullName;
                
                File.Copy(path, destDir);
            }
        }

        public static void RulesInstaller()
        {
            var runFile = EnvironmentVars.WINMAL + "mbam\\mbam2-rules.exe";
            ProcessStartInfo rules = new ProcessStartInfo();
            rules.UseShellExecute = false;
            rules.RedirectStandardOutput = true;
            rules.Arguments = "/sp- /verysilent /supressmsgboxes /log=" + EnvironmentVars.RAWLOGDIR +
                              "mbam_rules_install.log /norestart";
            rules.FileName = runFile;
            rules.WindowStyle = ProcessWindowStyle.Hidden;
            rules.CreateNoWindow = true;
            
            using (Process proc = Process.Start(rules))
            {
                proc.WaitForExit();
                System.Threading.Thread.Sleep(30000);
                var output = proc.StandardOutput.ReadToEnd();
                using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
                {
                    Logger.LogInfo(output, w);
                }
            }
        }

        public static void Scan()
        {
            var runFile = EnvironmentVars.SYSDRIVE + "Program Files\\Malwarebytes\\Anti-Malware\\mbam.exe";
            using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
            {
                Logger.LogInfo("Launching MBAM, click the scan button when it comes up.", w);
            }
            // Prepare the process to run
            ProcessStartInfo start = new ProcessStartInfo();
            start.UseShellExecute = false;
            start.RedirectStandardOutput = true;
            // Enter the executable to run, including the complete path
            start.FileName = runFile;


            // Run the external process & wait for it to finish
            using (Process proc = Process.Start(start))
            {
                proc.WaitForExit();
            }
            
            using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
            {
                Logger.LogInfo("Done.", w);
            }
        }

        public static void Cleanup()
        {
            var runFile = EnvironmentVars.SYSDRIVE + "Program Files\\Malwarebytes\\Anti-Malware\\unins000.exe";
            // Prepare the process to run
            ProcessStartInfo start = new ProcessStartInfo();
            start.UseShellExecute = false;
            start.RedirectStandardOutput = true;
            start.RedirectStandardError = true;
            
            // Enter in the command line arguments, everything you would enter after the executable name itself
            start.Arguments = "/verysilent /suppressmsgboxes /norestart";

            // Enter the executable to run, including the complete path
            start.FileName = runFile;
            // Do you want to show a console window?
            start.WindowStyle = ProcessWindowStyle.Hidden;
            start.CreateNoWindow = true;
            int exitCode;


            // Run the external process & wait for it to finish
            using (Process proc = Process.Start(start))
            {
                proc.WaitForExit();
                System.Threading.Thread.Sleep(30000);
                var output = proc.StandardOutput.ReadToEnd();
                using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
                {
                    Logger.LogInfo(output, w);
                }
                // Retrieve the app's exit code
                exitCode = proc.ExitCode;
            }
            
            using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
            {
                Logger.LogInfo("MBAM cleaned up...", w);
            }
        }
    }
}