using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.ServiceProcess;
using RepairTool.Core;

namespace RepairTool.Repairs.Activities.Malware
{
    public class MalwareBytes
    {
        /// <summary>
        /// Installs Malwarebytes to the target system
        /// </summary>
        public static void Install()
        {
            var repairType = "Malware Scans";
            var taskName = "Install Malwarebytes";
            var runFile = EnvironmentVars.WINMAL + "mbam\\mb3-setup-54035.54035-3.6.1.2711-1.0.482-1.0.7469.exe";
            var arguments = "/SP- /VERYSILENT /NORESTART /SUPPRESSMSGBOXES /NOCANCEL";
            var exitCode = -1;
            ProcessRunner.TaskRunner(repairType, taskName, runFile, arguments, exitCode);
        }

        /// <summary>
        /// Stops the MBAMservice
        /// </summary>
        public static void Close() // Hanging on this task Part of Task #10
        {
            using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
            {
                Logger.LogInfo("Attempting to halt the Malwarebytes service...", w);
            }
            var serviceName = "MBAMservice";
            ServiceController serviceController = new ServiceController(serviceName);
            TimeSpan timeout = TimeSpan.FromMilliseconds(1000);
            serviceController.Stop();
            serviceController.WaitForStatus(ServiceControllerStatus.Running, timeout);
        }
        /// <summary>
        /// Kills the mbamtray.exe process
        /// </summary>
        public static void KillTray()
        {
            foreach (var process in Process.GetProcessesByName("mbamtray"))
            {
                process.Kill();
            }
            using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
            {
                Logger.LogInfo("Malwarebytes successfully closed...", w); // We are stopping somewhere before this log post...
            }
        }

        public static void InstallConfig()
        {
            DirectoryInfo dirInfo = new DirectoryInfo(EnvironmentVars.WINMAL + "mbam\\");
            List<FileInfo> fileInfo = dirInfo.GetFiles("*.json").ToList();
            string destDir = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) +
                             "\\Malwarebytes\\MBAMService\\config\\";

            foreach (FileInfo foundFile in fileInfo)
            {
                var path = foundFile.FullName;
                
                File.Copy(path, destDir);
            }
        }

        public static void RulesInstaller()
        {
            var repairType = "Malware Scans";
            var taskName = "Install Malwarebytes Rules";
            var runFile = EnvironmentVars.WINMAL + "mbam\\mbam2-rules.exe";
            var arguments = "/sp- /verysilent /supressmsgboxes /log=" + EnvironmentVars.RAWLOGDIR +
                              "mbam_rules_install.log /norestart";
            ProcessRunner.TaskRunner(repairType, taskName, runFile, arguments);
        }

        public static void Scan()
        {
            var repairType = "Malware Scans";
            var taskName = "Malwarebytes Scans";
            var runFile = EnvironmentVars.SYSDRIVE + "Program Files\\Malwarebytes\\Anti-Malware\\mbam.exe";
            var arguments = "";
            using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
            {
                Logger.LogInfo("Launching MBAM, click the scan button when it comes up.", w);
            }
            ProcessRunner.TaskRunner(repairType, taskName, runFile, arguments);
        }

        public static void Cleanup()
        {
            var repairType = "Malware Scans";
            var taskName = "Remove Malwarebytes";
            var runFile = EnvironmentVars.SYSDRIVE + "Program Files\\Malwarebytes\\Anti-Malware\\unins000.exe";
            var arguments = "/verysilent /suppressmsgboxes /norestart";
            var exitCode = -1;
            ProcessRunner.TaskRunner(repairType, taskName, runFile, arguments, exitCode);
                        
            
            using (StreamWriter w = File.AppendText(EnvironmentVars.LOGFILE))
            {
                Logger.LogInfo("System will need a restart...", w);
            }
            EnvironmentVars.RebootRequired = true;
        }
    }
}